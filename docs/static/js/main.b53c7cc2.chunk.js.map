{"version":3,"sources":["components/AddCategoria.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategoria","setC","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","name","value","onChange","text","target","protoTypes","PropTypes","func","isRequired","GifGridItem","id","title","url","className","src","alt","getGifs","categoria","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","imagenes","string","GifApp","setCategoria","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAGaA,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE3B,EAAqCC,mBAAS,UAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAK,SAAAS,GAAG,OAAOP,GAAP,mBAAqBO,OAC7BN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,KAAK,GACLC,MAAOV,EACPW,SApBc,SAACR,GACvB,IAAMS,EAAOT,EAAEU,OAAOH,MACtBT,EAAcW,SAyBtBf,EAAaiB,WAAa,CACtBhB,KAAMiB,IAAUC,KAAKC,Y,YCjCZC,EAAc,SAAC,GAAqB,EAApBC,GAAoB,EAAhBC,MAAiB,IAAVC,EAAS,EAATA,IACpC,OACI,qBAAKC,UAAU,OAAf,SACI,qBAAKC,IAAKF,EAAKG,IAAI,Q,uBCHlBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHhB,GAAOgB,EAAIhB,GACXC,MAAOe,EAAIf,MACXC,IAAG,UAAIc,EAAIC,cAAR,aAAI,EAAYC,iBAAiBhB,QAVzB,kBAcZY,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAmB,IAEvC,ECHwB,SAACZ,GAGzB,MAA0B3B,mBAAS,CAC/BiC,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OATAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CAAET,KAAMY,EAAKL,SAAS,MAChC,UAEZ,CAACb,IAEGc,EDf4BM,CAFG,EAAhBpB,WAETqB,EAAb,EAAOf,KAAgBO,EAAvB,EAAuBA,QAGvB,OACI,qCACKA,GAAW,2CAEZ,qBAAKjB,UAAU,8CAAf,SAEQyB,EAASb,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAESA,GADAA,EAAIhB,aAcrCmB,EAAQxB,WAAa,CACjBY,UAAWX,IAAUiC,OAAO/B,YE5BzB,IAAMgC,EAAS,WAElB,MAAkClD,mBAAS,CAAC,SAA5C,mBAAO2B,EAAP,KAAkBwB,EAAlB,KAEA,OACI,qCACI,4CAEA,cAAC,EAAD,CAAcpD,KAAOoD,IAErB,6BAEQxB,EAAUQ,KAAI,SAAAR,GAAS,OACnB,cAAC,EAAD,CAEQA,UAAWA,GADNA,Y,MCbrCyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b53c7cc2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ({ setC }) => {\r\n\r\n    const [inputValue, setInputValue] =  useState('Buscar');\r\n\r\n    const handleInputChange = (e) =>{\r\n        const text = e.target.value;\r\n        setInputValue(text);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setC(cat  => [ inputValue,...cat ])\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                name=\"\" \r\n                value={inputValue} \r\n                onChange={ handleInputChange } \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategoria.protoTypes = {\r\n    setC: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async(categoria) =>  { \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=10&api_key=q8pc5vwiAGw1x0yBHKJoYDiWY4LtFthk`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json(); // Extraemos solo la data de la peticion\r\n    \r\n    const gifs = data.map(img => {\r\n        // Modificamos la respuesta solo con los datos que nos interesa\r\n        return {\r\n            id   : img.id,\r\n            title: img.title,\r\n            url  : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs; //Retorna una promesa\r\n    \r\n}","import React            from 'react'\r\nimport PropTypes        from 'prop-types';\r\nimport { GifGridItem }  from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n    \r\n    const {data: imagenes, loading } = useFetchGifs(categoria);\r\n    \r\n\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                {\r\n                    imagenes.map((img) => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            { ...img }\r\n                        />\r\n                        \r\n                    ))\r\n                \r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n\r\nGifGrid.protoTypes = { \r\n    categoria: PropTypes.string.isRequired\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    // Creamos un estado antes de que cargue toda la data(todos los gifs)\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true // Lo colocamos en true indicando que no tiene gifs\r\n    })\r\n\r\n    // Solo cargara cuando cargue la pagina por primera vez o cuando se modifica el estado\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setState({ data: imgs,loading: false })\r\n                }, 3000);\r\n            })\r\n    }, [categoria])\r\n\r\n    return state;\r\n\r\n    //? state = {data: [], loading: true}\r\n}","import React, { useState } from 'react'\r\nimport { AddCategoria } from './components/AddCategoria';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifApp = () => {\r\n\r\n    const [categoria, setCategoria] = useState(['luis']);\r\n\r\n    return(\r\n        <>\r\n            <h1>Mi Gif App</h1>\r\n            \r\n            <AddCategoria setC={ setCategoria }/>\r\n        \r\n            <ol>\r\n                {\r\n                    categoria.map(categoria => (\r\n                        <GifGrid \r\n                                key={categoria}\r\n                                categoria={categoria}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\t    </>\r\n    )\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifApp } from './GifApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}